import { ClientCreationOptions } from '../lib/HttpClient';
import ApprovePaymentTransactionsRequest from '../request/ApprovePaymentTransactionsRequest';
import CancelCrossBookingRequest from '../request/CancelCrossBookingRequest';
import CompleteThreeDSPaymentRequest from '../request/CompleteThreeDSPaymentRequest';
import CreatePaymentRequest from '../request/CreatePaymentRequest';
import CrossBookingRequest from '../request/CrossBookingRequest';
import DeleteStoredCardRequest from '../request/DeleteStoredCardRequest';
import DisapprovePaymentTransactionsRequest from '../request/DisapprovePaymentTransactionsRequest';
import InitCheckoutPaymentRequest from '../request/InitCheckoutPaymentRequest';
import InitCreditPaymentRequest from '../request/InitCreditPaymentRequest';
import InitThreeDsPaymentRequest from '../request/InitThreeDsPaymentRequest';
import PostAuthPaymentRequest from '../request/PostAuthPaymentRequest';
import RefundPaymentRequest from '../request/RefundPaymentRequest';
import RefundPaymentTransactionRequest from '../request/RefundPaymentTransactionRequest';
import SearchCrossBookingsRequest from '../request/SearchCrossBookingsRequest';
import SearchPaymentsRequest from '../request/SearchPaymentsRequest';
import SearchPaymentTransactionRefundsRequest from '../request/SearchPaymentTransactionRefundsRequest';
import SearchStoredCardsRequest from '../request/SearchStoredCardsRequest';
import UpdatePaymentTransactionRequest from '../request/UpdatePaymentTransactionRequest';
import CrossBookingTransactionResponse from '../response/CrossBookingTransactionResponse';
import DataResponse from '../response/DataResponse';
import InitCheckoutPaymentResponse from '../response/InitCheckoutPaymentResponse';
import InitThreeDSPaymentResponse from '../response/InitThreeDSPaymentResponse';
import InitCreditPaymentResponse from '../response/InitCreditPaymentResponse';
import PaymentDetailResponse from '../response/PaymentDetailResponse';
import PaymentRefundResponse from '../response/PaymentRefundResponse';
import PaymentResponse from '../response/PaymentResponse';
import PaymentTransactionApprovalListResponse from '../response/PaymentTransactionApprovalListResponse';
import PaymentTransactionRefundListResponse from '../response/PaymentTransactionRefundListResponse';
import PaymentTransactionRefundResponse from '../response/PaymentTransactionRefundResponse';
import PaymentTransactionResponse from '../response/PaymentTransactionResponse';
import StoredCardResponse from '../response/StoredCardResponse';
import BaseAdapter from './BaseAdapter';
import PreviewCreditPaymentRequest from '../request/PreviewCreditPaymentRequest';
import PreviewCreditPaymentResponse from '../response/PreviewCreditPaymentResponse';
export default class PaymentAdapter extends BaseAdapter {
    constructor(options: ClientCreationOptions);
    createPayment(request: CreatePaymentRequest): Promise<PaymentResponse>;
    retrievePayment(id: number): Promise<PaymentDetailResponse>;
    searchPayments(request: SearchPaymentsRequest): Promise<DataResponse<PaymentDetailResponse>>;
    approvePaymentTransactions(request: ApprovePaymentTransactionsRequest): Promise<PaymentTransactionApprovalListResponse>;
    disapprovePaymentTransactions(request: DisapprovePaymentTransactionsRequest): Promise<PaymentTransactionApprovalListResponse>;
    updatePaymentTransaction(id: number, request: UpdatePaymentTransactionRequest): Promise<PaymentTransactionResponse>;
    init3DSPayment(request: InitThreeDsPaymentRequest): Promise<InitThreeDSPaymentResponse>;
    complete3DSPayment(request: CompleteThreeDSPaymentRequest): Promise<PaymentResponse>;
    initCheckoutPayment(request: InitCheckoutPaymentRequest): Promise<InitCheckoutPaymentResponse>;
    initCreditPayment(request: InitCreditPaymentRequest): Promise<InitCreditPaymentResponse>;
    previewCreditPayment(request: PreviewCreditPaymentRequest): Promise<PreviewCreditPaymentResponse>;
    retrieveCheckoutPayment(token: string): Promise<PaymentResponse>;
    refundPaymentTransaction(request: RefundPaymentTransactionRequest): Promise<PaymentTransactionRefundResponse>;
    retrievePaymentTransactionRefund(refundTxId: number): Promise<PaymentTransactionRefundResponse>;
    searchPaymentTransactionRefunds(request: SearchPaymentTransactionRefundsRequest): Promise<PaymentTransactionRefundListResponse>;
    refundPayment(request: RefundPaymentRequest): Promise<PaymentRefundResponse>;
    retrievePaymentRefund(refundId: number): Promise<PaymentRefundResponse>;
    receiveMoney(request: CrossBookingRequest): Promise<CrossBookingTransactionResponse>;
    sendMoney(request: CrossBookingRequest): Promise<CrossBookingTransactionResponse>;
    cancelCrossBooking(request: CancelCrossBookingRequest): Promise<CrossBookingTransactionResponse>;
    searchCrossBookings(request: SearchCrossBookingsRequest): Promise<DataResponse<CrossBookingTransactionResponse>>;
    deleteStoredCard(request: DeleteStoredCardRequest): Promise<void>;
    searchStoredCards(request: SearchStoredCardsRequest): Promise<DataResponse<StoredCardResponse>>;
    postAuthPayment(paymentId: number, request: PostAuthPaymentRequest): Promise<PaymentResponse>;
}
